import*as wasm from".pnpm/gl-matrix-wasm@0.8.0/node_modules/gl-matrix-wasm/pkg/gl_matrix_wasm_bg";const __exports={};let cachegetFloat32Memory=null;function getFloat32Memory(){return null!==cachegetFloat32Memory&&cachegetFloat32Memory.buffer===wasm.memory.buffer||(cachegetFloat32Memory=new Float32Array(wasm.memory.buffer)),cachegetFloat32Memory}function getArrayF32FromWasm(t,r){return getFloat32Memory().subarray(t/4,t/4+r)}let cachedGlobalArgumentPtr=null;function globalArgumentPtr(){return null===cachedGlobalArgumentPtr&&(cachedGlobalArgumentPtr=wasm.__wbindgen_global_argument_ptr()),cachedGlobalArgumentPtr}let cachegetUint32Memory=null;function getUint32Memory(){return null!==cachegetUint32Memory&&cachegetUint32Memory.buffer===wasm.memory.buffer||(cachegetUint32Memory=new Uint32Array(wasm.memory.buffer)),cachegetUint32Memory}function isLikeNone(t){return null==t}function __wbg_random_b57732cc51ad52fd(){return Math.random()}__exports.__wbg_random_b57732cc51ad52fd=__wbg_random_b57732cc51ad52fd;let cachedTextDecoder=new TextDecoder("utf-8"),cachegetUint8Memory=null;function getUint8Memory(){return null!==cachegetUint8Memory&&cachegetUint8Memory.buffer===wasm.memory.buffer||(cachegetUint8Memory=new Uint8Array(wasm.memory.buffer)),cachegetUint8Memory}function getStringFromWasm(t,r){return cachedTextDecoder.decode(getUint8Memory().subarray(t,t+r))}function __wbindgen_throw(t,r){throw new Error(getStringFromWasm(t,r))}function freeMatrix2(t){wasm.__wbg_matrix2_free(t)}__exports.__wbindgen_throw=__wbindgen_throw;export class Matrix2{static __wrap(t){const r=Object.create(Matrix4.prototype);r.ptr=t;const a=t/4+1;return this._elements=new Float32Array(wasm.memory.buffer).subarray(a,a+4),r}free(){const t=this.ptr;this.ptr=0,freeMatrix2(t)}get elements(){return this._elements}static create(){return Matrix2.__wrap(wasm.matrix2_create())}static clone(t){return Matrix2.__wrap(wasm.matrix2_clone(t.ptr))}static copy(t,r){return wasm.matrix2_copy(t.ptr,r.ptr),t}static identity(t){return wasm.matrix2_identity(t.ptr),t}static fromValues(t,r,a,e){return Matrix2.__wrap(wasm.matrix2_fromValues(t,r,a,e))}static set(t,r,a,e,s){return wasm.matrix2_set(t.ptr,r,a,e,s),t}static transpose(t,r){return wasm.matrix2_transpose(t.ptr,r.ptr),t}static invert(t,r){return wasm.matrix2_invert(t.ptr,r.ptr),t}static adjoint(t,r){return wasm.matrix2_adjoint(t.ptr,r.ptr),t}static determinant(t){return wasm.matrix2_determinant(t.ptr)}static multiply(t,r,a){return wasm.matrix2_multiply(t.ptr,r.ptr,a.ptr),t}static rotate(t,r,a){return wasm.matrix2_rotate(t.ptr,r.ptr,a),t}static scale(t,r,a){return wasm.matrix2_scale(t.ptr,r.ptr,a.ptr),t}static fromRotation(t,r){return wasm.matrix2_fromRotation(t.ptr,r),t}static fromScaling(t,r){return wasm.matrix2_fromScaling(t.ptr,r.ptr),t}static frob(t){return wasm.matrix2_frob(t.ptr)}static LDU(t,r,a,e){return wasm.matrix2_LDU(t.ptr,r.ptr,a.ptr,e.ptr)}static add(t,r,a){return wasm.matrix2_add(t.ptr,r.ptr,a.ptr),t}static subtract(t,r,a){return wasm.matrix2_subtract(t.ptr,r.ptr,a.ptr),t}static exactEquals(t,r){return 0!==wasm.matrix2_exactEquals(t.ptr,r.ptr)}static equals(t,r){return 0!==wasm.matrix2_equals(t.ptr,r.ptr)}static multiplyScalar(t,r,a){return wasm.matrix2_multiplyScalar(t.ptr,r.ptr,a),t}static multiplyScalarAndAdd(t,r,a,e){return wasm.matrix2_multiplyScalarAndAdd(t.ptr,r.ptr,a.ptr,e),t}static mul(t,r,a){return wasm.matrix2_mul(t.ptr,r.ptr,a.ptr),t}static sub(t,r,a){return wasm.matrix2_sub(t.ptr,r.ptr,a.ptr),t}}function freeMatrix2d(t){wasm.__wbg_matrix2d_free(t)}export class Matrix2d{static __wrap(t){const r=Object.create(Matrix4.prototype);r.ptr=t;const a=t/4+1;return this._elements=new Float32Array(wasm.memory.buffer).subarray(a,a+6),r}free(){const t=this.ptr;this.ptr=0,freeMatrix2d(t)}get elements(){return this._elements}static create(){return Matrix2d.__wrap(wasm.matrix2d_create())}static clone(t){return Matrix2d.__wrap(wasm.matrix2d_clone(t.ptr))}static copy(t,r){return wasm.matrix2d_copy(t.ptr,r.ptr),t}static identity(t){return wasm.matrix2d_identity(t.ptr),t}static fromValues(t,r,a,e,s,n){return Matrix2d.__wrap(wasm.matrix2d_fromValues(t,r,a,e,s,n))}static set(t,r,a,e,s,n,i){return wasm.matrix2d_set(t.ptr,r,a,e,s,n,i),t}static invert(t,r){return wasm.matrix2d_invert(t.ptr,r.ptr),t}static determinant(t){return wasm.matrix2d_determinant(t.ptr)}static multiply(t,r,a){return wasm.matrix2d_multiply(t.ptr,r.ptr,a.ptr),t}static rotate(t,r,a){return wasm.matrix2d_rotate(t.ptr,r.ptr,a),t}static scale(t,r,a){return wasm.matrix2d_scale(t.ptr,r.ptr,a.ptr),t}static translate(t,r,a){return wasm.matrix2d_translate(t.ptr,r.ptr,a.ptr),t}static fromRotation(t,r){return wasm.matrix2d_fromRotation(t.ptr,r),t}static fromScaling(t,r){return wasm.matrix2d_fromScaling(t.ptr,r.ptr),t}static fromTranslation(t,r){return wasm.matrix2d_fromTranslation(t.ptr,r.ptr),t}static frob(t){return wasm.matrix2d_frob(t.ptr)}static add(t,r,a){return wasm.matrix2d_add(t.ptr,r.ptr,a.ptr),t}static subtract(t,r,a){return wasm.matrix2d_subtract(t.ptr,r.ptr,a.ptr),t}static multiplyScalar(t,r,a){return wasm.matrix2d_multiplyScalar(t.ptr,r.ptr,a),t}static multiplyScalarAndAdd(t,r,a,e){return wasm.matrix2d_multiplyScalarAndAdd(t.ptr,r.ptr,a.ptr,e),t}static exactEquals(t,r){return 0!==wasm.matrix2d_exactEquals(t.ptr,r.ptr)}static equals(t,r){return 0!==wasm.matrix2d_equals(t.ptr,r.ptr)}static mul(t,r,a){return wasm.matrix2d_mul(t.ptr,r.ptr,a.ptr),t}static sub(t,r,a){return wasm.matrix2d_sub(t.ptr,r.ptr,a.ptr),t}}function freeMatrix3(t){wasm.__wbg_matrix3_free(t)}export class Matrix3{static __wrap(t){const r=Object.create(Matrix4.prototype);r.ptr=t;const a=t/4+1;return this._elements=new Float32Array(wasm.memory.buffer).subarray(a,a+9),r}free(){const t=this.ptr;this.ptr=0,freeMatrix3(t)}get elements(){return this._elements}static create(){return Matrix3.__wrap(wasm.matrix3_create())}static fromMat4(t,r){return wasm.matrix3_fromMat4(t.ptr,r.ptr),t}static clone(t){return Matrix3.__wrap(wasm.matrix3_clone(t.ptr))}static copy(t,r){return wasm.matrix3_copy(t.ptr,r.ptr),t}static fromValues(t,r,a,e,s,n,i,p,c){return Matrix3.__wrap(wasm.matrix3_fromValues(t,r,a,e,s,n,i,p,c))}static set(t,r,a,e,s,n,i,p,c,m){return wasm.matrix3_set(t.ptr,r,a,e,s,n,i,p,c,m),t}static identity(t){return wasm.matrix3_identity(t.ptr),t}static transpose(t,r){return wasm.matrix3_transpose(t.ptr,r.ptr),t}static invert(t,r){return wasm.matrix3_invert(t.ptr,r.ptr),t}static adjoint(t,r){return wasm.matrix3_adjoint(t.ptr,r.ptr),t}static determinant(t){return wasm.matrix3_determinant(t.ptr)}static multiply(t,r,a){return wasm.matrix3_multiply(t.ptr,r.ptr,a.ptr),t}static translate(t,r,a){return wasm.matrix3_translate(t.ptr,r.ptr,a.ptr),t}static rotate(t,r,a){return wasm.matrix3_rotate(t.ptr,r.ptr,a),t}static scale(t,r,a){return wasm.matrix3_scale(t.ptr,r.ptr,a.ptr),t}static fromTranslation(t,r){return wasm.matrix3_fromTranslation(t.ptr,r.ptr),t}static fromRotation(t,r){return wasm.matrix3_fromRotation(t.ptr,r),t}static fromScaling(t,r){return wasm.matrix3_fromScaling(t.ptr,r.ptr),t}static fromMat2d(t,r){return wasm.matrix3_fromMat2d(t.ptr,r.ptr),t}static fromQuat(t,r){return wasm.matrix3_fromQuat(t.ptr,r.ptr),t}static normalFromMat4(t,r){return wasm.matrix3_normalFromMat4(t.ptr,r.ptr),t}static projection(t,r,a){return wasm.matrix3_projection(t.ptr,r,a),t}static frob(t){return wasm.matrix3_frob(t.ptr)}static add(t,r,a){return wasm.matrix3_add(t.ptr,r.ptr,a.ptr),t}static subtract(t,r,a){return wasm.matrix3_subtract(t.ptr,r.ptr,a.ptr),t}static multiplyScalar(t,r,a){return wasm.matrix3_multiplyScalar(t.ptr,r.ptr,a),t}static multiplyScalarAndAdd(t,r,a,e){return wasm.matrix3_multiplyScalarAndAdd(t.ptr,r.ptr,a.ptr,e),t}static exactEquals(t,r){return 0!==wasm.matrix3_exactEquals(t.ptr,r.ptr)}static equals(t,r){return 0!==wasm.matrix3_equals(t.ptr,r.ptr)}static mul(t,r,a){return wasm.matrix3_mul(t.ptr,r.ptr,a.ptr),t}static sub(t,r,a){return wasm.matrix3_sub(t.ptr,r.ptr,a.ptr),t}}function freeMatrix4(t){wasm.__wbg_matrix4_free(t)}export class Matrix4{static __wrap(t){const r=Object.create(Matrix4.prototype);r.ptr=t;const a=t/4+1;return this._elements=new Float32Array(wasm.memory.buffer).subarray(a,a+16),r}free(){const t=this.ptr;this.ptr=0,freeMatrix4(t)}get elements(){return this._elements}static create(){return Matrix4.__wrap(wasm.matrix4_create())}static clone(t){return Matrix4.__wrap(wasm.matrix4_clone(t.ptr))}static copy(t,r){return wasm.matrix4_copy(t.ptr,r.ptr),t}static fromValues(t,r,a,e,s,n,i,p,c,m,o,u,_,w,l,d){return Matrix4.__wrap(wasm.matrix4_fromValues(t,r,a,e,s,n,i,p,c,m,o,u,_,w,l,d))}static set(t,r,a,e,s,n,i,p,c,m,o,u,_,w,l,d,f){return wasm.matrix4_set(t.ptr,r,a,e,s,n,i,p,c,m,o,u,_,w,l,d,f),t}static identity(t){return wasm.matrix4_identity(t.ptr),t}static transpose(t,r){return wasm.matrix4_transpose(t.ptr,r.ptr),t}static invert(t,r){return wasm.matrix4_invert(t.ptr,r.ptr),t}static adjoint(t,r){return wasm.matrix4_adjoint(t.ptr,r.ptr),t}static determinant(t){return wasm.matrix4_determinant(t.ptr)}static multiply(t,r,a){return wasm.matrix4_multiply(t.ptr,r.ptr,a.ptr),t}static translate(t,r,a){return wasm.matrix4_translate(t.ptr,r.ptr,a.ptr),t}static scale(t,r,a){return wasm.matrix4_scale(t.ptr,r.ptr,a.ptr),t}static rotate(t,r,a,e){return wasm.matrix4_rotate(t.ptr,r.ptr,a,e.ptr),t}static rotateX(t,r,a){return wasm.matrix4_rotateX(t.ptr,r.ptr,a),t}static rotateY(t,r,a){return wasm.matrix4_rotateY(t.ptr,r.ptr,a),t}static rotateZ(t,r,a){return wasm.matrix4_rotateZ(t.ptr,r.ptr,a),t}static fromTranslation(t,r){return wasm.matrix4_fromTranslation(t.ptr,r.ptr),t}static fromScaling(t,r){return wasm.matrix4_fromScaling(t.ptr,r.ptr),t}static fromRotation(t,r,a){return wasm.matrix4_fromRotation(t.ptr,r,a.ptr),t}static fromXRotation(t,r){return wasm.matrix4_fromXRotation(t.ptr,r),t}static fromYRotation(t,r){return wasm.matrix4_fromYRotation(t.ptr,r),t}static fromZRotation(t,r){return wasm.matrix4_fromZRotation(t.ptr,r),t}static fromRotationTranslation(t,r,a){return wasm.matrix4_fromRotationTranslation(t.ptr,r.ptr,a.ptr),t}static fromQuat2(t,r){return wasm.matrix4_fromQuat2(t.ptr,r.ptr),t}static getTranslation(t,r){return wasm.matrix4_getTranslation(t.ptr,r.ptr),t}static getScaling(t,r){return wasm.matrix4_getScaling(t.ptr,r.ptr),t}static getRotation(t,r){return wasm.matrix4_getRotation(t.ptr,r.ptr),t}static fromRotationTranslationScale(t,r,a,e){return wasm.matrix4_fromRotationTranslationScale(t.ptr,r.ptr,a.ptr,e.ptr),t}static fromRotationTranslationScaleOrigin(t,r,a,e,s){return wasm.matrix4_fromRotationTranslationScaleOrigin(t.ptr,r.ptr,a.ptr,e.ptr,s.ptr),t}static fromQuat(t,r){return wasm.matrix4_fromQuat(t.ptr,r.ptr),t}static frustum(t,r,a,e,s,n,i){return wasm.matrix4_frustum(t.ptr,r,a,e,s,n,i),t}static perspective(t,r,a,e,s){return wasm.matrix4_perspective(t.ptr,r,a,e,!isLikeNone(s),isLikeNone(s)?0:s),t}static ortho(t,r,a,e,s,n,i){return wasm.matrix4_ortho(t.ptr,r,a,e,s,n,i),t}static lookAt(t,r,a,e){return wasm.matrix4_lookAt(t.ptr,r.ptr,a.ptr,e.ptr),t}static targetTo(t,r,a,e){return wasm.matrix4_targetTo(t.ptr,r.ptr,a.ptr,e.ptr),t}static frob(t){return wasm.matrix4_frob(t.ptr)}static add(t,r,a){return wasm.matrix4_add(t.ptr,r.ptr,a.ptr),t}static subtract(t,r,a){return wasm.matrix4_subtract(t.ptr,r.ptr,a.ptr),t}static multiplyScalar(t,r,a){return wasm.matrix4_multiplyScalar(t.ptr,r.ptr,a),t}static multiplyScalarAndAdd(t,r,a,e){return wasm.matrix4_multiplyScalarAndAdd(t.ptr,r.ptr,a.ptr,e),t}static exactEquals(t,r){return 0!==wasm.matrix4_exactEquals(t.ptr,r.ptr)}static equals(t,r){return 0!==wasm.matrix4_equals(t.ptr,r.ptr)}static mul(t,r,a){return wasm.matrix4_mul(t.ptr,r.ptr,a.ptr),t}static sub(t,r,a){return wasm.matrix4_sub(t.ptr,r.ptr,a.ptr),t}}function freeQuaternion(t){wasm.__wbg_quaternion_free(t)}export class Quaternion{static __wrap(t){const r=Object.create(Matrix4.prototype);r.ptr=t;const a=t/4+1;return this._elements=new Float32Array(wasm.memory.buffer).subarray(a,a+4),r}free(){const t=this.ptr;this.ptr=0,freeQuaternion(t)}get elements(){return this._elements}static create(){return Quaternion.__wrap(wasm.quaternion_create())}static identity(t){return wasm.quaternion_identity(t.ptr),t}static setAxisAngle(t,r,a){return wasm.quaternion_setAxisAngle(t.ptr,r.ptr,a),t}static getAxisAngle(t,r){return wasm.quaternion_getAxisAngle(t.ptr,r.ptr)}static multiply(t,r,a){return wasm.quaternion_multiply(t.ptr,r.ptr,a.ptr),t}static rotateX(t,r,a){return wasm.quaternion_rotateX(t.ptr,r.ptr,a),t}static rotateY(t,r,a){return wasm.quaternion_rotateY(t.ptr,r.ptr,a),t}static rotateZ(t,r,a){return wasm.quaternion_rotateZ(t.ptr,r.ptr,a),t}static calculateW(t,r){return wasm.quaternion_calculateW(t.ptr,r.ptr),t}static slerp(t,r,a,e){return wasm.quaternion_slerp(t.ptr,r.ptr,a.ptr,e),t}static random(t){return wasm.quaternion_random(t.ptr),t}static invert(t,r){return wasm.quaternion_invert(t.ptr,r.ptr),t}static conjugate(t,r){return wasm.quaternion_conjugate(t.ptr,r.ptr),t}static fromMat3(t,r){return wasm.quaternion_fromMat3(t.ptr,r.ptr),t}static fromEuler(t,r,a,e){return wasm.quaternion_fromEuler(t.ptr,r,a,e),t}static clone(t){return Quaternion.__wrap(wasm.quaternion_clone(t.ptr))}static fromValues(t,r,a,e){return Quaternion.__wrap(wasm.quaternion_fromValues(t,r,a,e))}static copy(t,r){return wasm.quaternion_copy(t.ptr,r.ptr),t}static set(t,r,a,e,s){return wasm.quaternion_set(t.ptr,r,a,e,s),t}static add(t,r,a){return wasm.quaternion_add(t.ptr,r.ptr,a.ptr),t}static mul(t,r,a){return wasm.quaternion_mul(t.ptr,r.ptr,a.ptr),t}static scale(t,r,a){return wasm.quaternion_scale(t.ptr,r.ptr,a),t}static dot(t,r){return wasm.quaternion_dot(t.ptr,r.ptr)}static lerp(t,r,a,e){return wasm.quaternion_lerp(t.ptr,r.ptr,a.ptr,e),t}static len(t){return wasm.quaternion_len(t.ptr)}static squaredLength(t){return wasm.quaternion_squaredLength(t.ptr)}static sqrLen(t){return wasm.quaternion_sqrLen(t.ptr)}static normalize(t,r){return wasm.quaternion_normalize(t.ptr,r.ptr),t}static exactEquals(t,r){return 0!==wasm.quaternion_exactEquals(t.ptr,r.ptr)}static equals(t,r){return 0!==wasm.quaternion_equals(t.ptr,r.ptr)}static rotationTo(t,r,a){return wasm.quaternion_rotationTo(t.ptr,r.ptr,a.ptr),t}static sqlerp(t,r,a,e,s,n){return wasm.quaternion_sqlerp(t.ptr,r.ptr,a.ptr,e.ptr,s.ptr,n),t}static setAxes(t,r,a,e){return wasm.quaternion_setAxes(t.ptr,r.ptr,a.ptr,e.ptr),t}}function freeQuaternion2(t){wasm.__wbg_quaternion2_free(t)}export class Quaternion2{static __wrap(t){const r=Object.create(Matrix4.prototype);r.ptr=t;const a=t/4+1;return this._elements=new Float32Array(wasm.memory.buffer).subarray(a,a+8),r}free(){const t=this.ptr;this.ptr=0,freeQuaternion2(t)}get elements(){return this._elements}static create(){return Quaternion2.__wrap(wasm.quaternion2_create())}static clone(t){return Quaternion2.__wrap(wasm.quaternion2_clone(t.ptr))}static fromValues(t,r,a,e,s,n,i,p){return Quaternion2.__wrap(wasm.quaternion2_fromValues(t,r,a,e,s,n,i,p))}static fromRotationTranslationValues(t,r,a,e,s,n,i){return Quaternion2.__wrap(wasm.quaternion2_fromRotationTranslationValues(t,r,a,e,s,n,i))}static fromRotationTranslation(t,r,a){return wasm.quaternion2_fromRotationTranslation(t.ptr,r.ptr,a.ptr),t}static fromTranslation(t,r){return wasm.quaternion2_fromTranslation(t.ptr,r.ptr),t}static fromRotation(t,r){return wasm.quaternion2_fromRotation(t.ptr,r.ptr),t}static fromMat4(t,r){return wasm.quaternion2_fromMat4(t.ptr,r.ptr),t}static copy(t,r){return wasm.quaternion2_copy(t.ptr,r.ptr),t}static identity(t){return wasm.quaternion2_identity(t.ptr),t}static set(t,r,a,e,s,n,i,p,c){return wasm.quaternion2_set(t.ptr,r,a,e,s,n,i,p,c),t}static getReal(t,r){return wasm.quaternion2_getReal(t.ptr,r.ptr),t}static getDual(t,r){return wasm.quaternion2_getDual(t.ptr,r.ptr),t}static setReal(t,r){return wasm.quaternion2_setReal(t.ptr,r.ptr),t}static setDual(t,r){return wasm.quaternion2_setDual(t.ptr,r.ptr),t}static getTranslation(t,r){return wasm.quaternion2_getTranslation(t.ptr,r.ptr),t}static translate(t,r,a){return wasm.quaternion2_translate(t.ptr,r.ptr,a.ptr),t}static rotateX(t,r,a){return wasm.quaternion2_rotateX(t.ptr,r.ptr,a),t}static rotateY(t,r,a){return wasm.quaternion2_rotateY(t.ptr,r.ptr,a),t}static rotateZ(t,r,a){return wasm.quaternion2_rotateZ(t.ptr,r.ptr,a),t}static rotateByQuatAppend(t,r,a){return wasm.quaternion2_rotateByQuatAppend(t.ptr,r.ptr,a.ptr),t}static rotateByQuatPrepend(t,r,a){return wasm.quaternion2_rotateByQuatPrepend(t.ptr,r.ptr,a.ptr),t}static rotateAroundAxis(t,r,a,e){return wasm.quaternion2_rotateAroundAxis(t.ptr,r.ptr,a.ptr,e),t}static add(t,r,a){return wasm.quaternion2_add(t.ptr,r.ptr,a.ptr),t}static multiply(t,r,a){return wasm.quaternion2_multiply(t.ptr,r.ptr,a.ptr),t}static mul(t,r,a){return wasm.quaternion2_mul(t.ptr,r.ptr,a.ptr),t}static scale(t,r,a){return wasm.quaternion2_scale(t.ptr,r.ptr,a),t}static dot(t,r){return wasm.quaternion2_dot(t.ptr,r.ptr)}static lerp(t,r,a,e){return wasm.quaternion2_lerp(t.ptr,r.ptr,a.ptr,e),t}static invert(t,r){return wasm.quaternion2_invert(t.ptr,r.ptr),t}static conjugate(t,r){return wasm.quaternion2_conjugate(t.ptr,r.ptr),t}static len(t){return wasm.quaternion2_len(t.ptr)}static squaredLength(t){return wasm.quaternion2_squaredLength(t.ptr)}static sqrLen(t){return wasm.quaternion2_sqrLen(t.ptr)}static normalize(t,r){return wasm.quaternion2_normalize(t.ptr,r.ptr),t}static exactEquals(t,r){return 0!==wasm.quaternion2_exactEquals(t.ptr,r.ptr)}static equals(t,r){return 0!==wasm.quaternion2_equals(t.ptr,r.ptr)}}function freeVector2(t){wasm.__wbg_vector2_free(t)}export class Vector2{static __wrap(t){const r=Object.create(Matrix4.prototype);r.ptr=t;const a=t/4+1;return this._elements=new Float32Array(wasm.memory.buffer).subarray(a,a+2),r}free(){const t=this.ptr;this.ptr=0,freeVector2(t)}get elements(){return this._elements}static create(){return Vector2.__wrap(wasm.vector2_create())}static clone(t){return Vector2.__wrap(wasm.vector2_clone(t.ptr))}static fromValues(t,r){return Vector2.__wrap(wasm.vector2_fromValues(t,r))}static copy(t,r){return wasm.vector2_copy(t.ptr,r.ptr),t}static set(t,r,a){return wasm.vector2_set(t.ptr,r,a),t}static add(t,r,a){return wasm.vector2_add(t.ptr,r.ptr,a.ptr),t}static subtract(t,r,a){return wasm.vector2_subtract(t.ptr,r.ptr,a.ptr),t}static multiply(t,r,a){return wasm.vector2_multiply(t.ptr,r.ptr,a.ptr),t}static divide(t,r,a){return wasm.vector2_divide(t.ptr,r.ptr,a.ptr),t}static ceil(t,r){return wasm.vector2_ceil(t.ptr,r.ptr),t}static floor(t,r){return wasm.vector2_floor(t.ptr,r.ptr),t}static min(t,r,a){return wasm.vector2_min(t.ptr,r.ptr,a.ptr),t}static max(t,r,a){return wasm.vector2_max(t.ptr,r.ptr,a.ptr),t}static round(t,r){return wasm.vector2_round(t.ptr,r.ptr),t}static scale(t,r,a){return wasm.vector2_scale(t.ptr,r.ptr,a),t}static scaleAndAdd(t,r,a,e){return wasm.vector2_scaleAndAdd(t.ptr,r.ptr,a.ptr,e),t}static distance(t,r){return wasm.vector2_distance(t.ptr,r.ptr)}static squaredDistance(t,r){return wasm.vector2_squaredDistance(t.ptr,r.ptr)}static len(t){return wasm.vector2_len(t.ptr)}static squaredLength(t){return wasm.vector2_squaredLength(t.ptr)}static negate(t,r){return wasm.vector2_negate(t.ptr,r.ptr),t}static inverse(t,r){return wasm.vector2_inverse(t.ptr,r.ptr),t}static normalize(t,r){return wasm.vector2_normalize(t.ptr,r.ptr),t}static dot(t,r){return wasm.vector2_dot(t.ptr,r.ptr)}static cross(t,r,a){return wasm.vector2_cross(t.ptr,r.ptr,a.ptr),t}static lerp(t,r,a,e){return wasm.vector2_lerp(t.ptr,r.ptr,a.ptr,e),t}static random(t,r){return wasm.vector2_random(t.ptr,!isLikeNone(r),isLikeNone(r)?0:r),t}static transformMat2(t,r,a){return wasm.vector2_transformMat2(t.ptr,r.ptr,a.ptr),t}static transformMat2d(t,r,a){return wasm.vector2_transformMat2d(t.ptr,r.ptr,a.ptr),t}static transformMat3(t,r,a){return wasm.vector2_transformMat3(t.ptr,r.ptr,a.ptr),t}static transformMat4(t,r,a){return wasm.vector2_transformMat4(t.ptr,r.ptr,a.ptr),t}static rotate(t,r,a,e){return wasm.vector2_rotate(t.ptr,r.ptr,a.ptr,e),t}static angle(t,r){return wasm.vector2_angle(t.ptr,r.ptr)}static zero(t){return wasm.vector2_zero(t.ptr),t}static exactEquals(t,r){return 0!==wasm.vector2_exactEquals(t.ptr,r.ptr)}static equals(t,r){return 0!==wasm.vector2_equals(t.ptr,r.ptr)}static sub(t,r,a){return wasm.vector2_sub(t.ptr,r.ptr,a.ptr),t}static mul(t,r,a){return wasm.vector2_mul(t.ptr,r.ptr,a.ptr),t}static div(t,r,a){return wasm.vector2_div(t.ptr,r.ptr,a.ptr),t}static dist(t,r){return wasm.vector2_dist(t.ptr,r.ptr)}static sqrDist(t,r){return wasm.vector2_sqrDist(t.ptr,r.ptr)}static sqrLen(t){return wasm.vector2_sqrLen(t.ptr)}}function freeVector3(t){wasm.__wbg_vector3_free(t)}export class Vector3{static __wrap(t){const r=Object.create(Matrix4.prototype);r.ptr=t;const a=t/4+1;return this._elements=new Float32Array(wasm.memory.buffer).subarray(a,a+3),r}free(){const t=this.ptr;this.ptr=0,freeVector3(t)}get elements(){return this._elements}static create(){return Vector3.__wrap(wasm.vector3_create())}static clone(t){return Vector3.__wrap(wasm.vector3_clone(t.ptr))}static len(t){return wasm.vector3_len(t.ptr)}static fromValues(t,r,a){return Vector3.__wrap(wasm.vector3_fromValues(t,r,a))}static copy(t,r){return wasm.vector3_copy(t.ptr,r.ptr),t}static set(t,r,a,e){return wasm.vector3_set(t.ptr,r,a,e),t}static add(t,r,a){return wasm.vector3_add(t.ptr,r.ptr,a.ptr),t}static subtract(t,r,a){return wasm.vector3_subtract(t.ptr,r.ptr,a.ptr),t}static multiply(t,r,a){return wasm.vector3_multiply(t.ptr,r.ptr,a.ptr),t}static divide(t,r,a){return wasm.vector3_divide(t.ptr,r.ptr,a.ptr),t}static ceil(t,r){return wasm.vector3_ceil(t.ptr,r.ptr),t}static floor(t,r){return wasm.vector3_floor(t.ptr,r.ptr),t}static min(t,r,a){return wasm.vector3_min(t.ptr,r.ptr,a.ptr),t}static max(t,r,a){return wasm.vector3_max(t.ptr,r.ptr,a.ptr),t}static round(t,r){return wasm.vector3_round(t.ptr,r.ptr),t}static scale(t,r,a){return wasm.vector3_scale(t.ptr,r.ptr,a),t}static scaleAndAdd(t,r,a,e){return wasm.vector3_scaleAndAdd(t.ptr,r.ptr,a.ptr,e),t}static distance(t,r){return wasm.vector3_distance(t.ptr,r.ptr)}static squaredDistance(t,r){return wasm.vector3_squaredDistance(t.ptr,r.ptr)}static squaredLength(t){return wasm.vector3_squaredLength(t.ptr)}static negate(t,r){return wasm.vector3_negate(t.ptr,r.ptr),t}static inverse(t,r){return wasm.vector3_inverse(t.ptr,r.ptr),t}static normalize(t,r){return wasm.vector3_normalize(t.ptr,r.ptr),t}static dot(t,r){return wasm.vector3_dot(t.ptr,r.ptr)}static cross(t,r,a){return wasm.vector3_cross(t.ptr,r.ptr,a.ptr),t}static lerp(t,r,a,e){return wasm.vector3_lerp(t.ptr,r.ptr,a.ptr,e),t}static hermite(t,r,a,e,s,n){return wasm.vector3_hermite(t.ptr,r.ptr,a.ptr,e.ptr,s.ptr,n),t}static bezier(t,r,a,e,s,n){return wasm.vector3_bezier(t.ptr,r.ptr,a.ptr,e.ptr,s.ptr,n),t}static random(t,r){return wasm.vector3_random(t.ptr,!isLikeNone(r),isLikeNone(r)?0:r),t}static transformMat4(t,r,a){return wasm.vector3_transformMat4(t.ptr,r.ptr,a.ptr),t}static transformMat3(t,r,a){return wasm.vector3_transformMat3(t.ptr,r.ptr,a.ptr),t}static transformQuat(t,r,a){return wasm.vector3_transformQuat(t.ptr,r.ptr,a.ptr),t}static rotateX(t,r,a,e){return wasm.vector3_rotateX(t.ptr,r.ptr,a.ptr,e),t}static rotateY(t,r,a,e){return wasm.vector3_rotateY(t.ptr,r.ptr,a.ptr,e),t}static rotateZ(t,r,a,e){return wasm.vector3_rotateZ(t.ptr,r.ptr,a.ptr,e),t}static angle(t,r){return wasm.vector3_angle(t.ptr,r.ptr)}static zero(t){return wasm.vector3_zero(t.ptr),t}static exactEquals(t,r){return 0!==wasm.vector3_exactEquals(t.ptr,r.ptr)}static equals(t,r){return 0!==wasm.vector3_equals(t.ptr,r.ptr)}static sub(t,r,a){return wasm.vector3_sub(t.ptr,r.ptr,a.ptr),t}static mul(t,r,a){return wasm.vector3_mul(t.ptr,r.ptr,a.ptr),t}static div(t,r,a){return wasm.vector3_div(t.ptr,r.ptr,a.ptr),t}static dist(t,r){return wasm.vector3_dist(t.ptr,r.ptr)}static sqrDist(t,r){return wasm.vector3_sqrDist(t.ptr,r.ptr)}static sqrLen(t){return wasm.vector3_sqrLen(t.ptr)}}function freeVector4(t){wasm.__wbg_vector4_free(t)}export class Vector4{static __wrap(t){const r=Object.create(Matrix4.prototype);r.ptr=t;const a=t/4+1;return this._elements=new Float32Array(wasm.memory.buffer).subarray(a,a+4),r}free(){const t=this.ptr;this.ptr=0,freeVector4(t)}get elements(){return this._elements}static create(){return Vector4.__wrap(wasm.vector4_create())}static clone(t){return Vector4.__wrap(wasm.vector4_clone(t.ptr))}static fromValues(t,r,a,e){return Vector4.__wrap(wasm.vector4_fromValues(t,r,a,e))}static copy(t,r){return wasm.vector4_copy(t.ptr,r.ptr),t}static set(t,r,a,e,s){return wasm.vector4_set(t.ptr,r,a,e,s),t}static add(t,r,a){return wasm.vector4_add(t.ptr,r.ptr,a.ptr),t}static subtract(t,r,a){return wasm.vector4_subtract(t.ptr,r.ptr,a.ptr),t}static multiply(t,r,a){return wasm.vector4_multiply(t.ptr,r.ptr,a.ptr),t}static divide(t,r,a){return wasm.vector4_divide(t.ptr,r.ptr,a.ptr),t}static ceil(t,r){return wasm.vector4_ceil(t.ptr,r.ptr),t}static floor(t,r){return wasm.vector4_floor(t.ptr,r.ptr),t}static min(t,r,a){return wasm.vector4_min(t.ptr,r.ptr,a.ptr),t}static max(t,r,a){return wasm.vector4_max(t.ptr,r.ptr,a.ptr),t}static round(t,r){return wasm.vector4_round(t.ptr,r.ptr),t}static scale(t,r,a){return wasm.vector4_scale(t.ptr,r.ptr,a),t}static scaleAndAdd(t,r,a,e){return wasm.vector4_scaleAndAdd(t.ptr,r.ptr,a.ptr,e),t}static distance(t,r){return wasm.vector4_distance(t.ptr,r.ptr)}static squaredDistance(t,r){return wasm.vector4_squaredDistance(t.ptr,r.ptr)}static len(t){return wasm.vector4_len(t.ptr)}static squaredLength(t){return wasm.vector4_squaredLength(t.ptr)}static negate(t,r){return wasm.vector4_negate(t.ptr,r.ptr),t}static inverse(t,r){return wasm.vector4_inverse(t.ptr,r.ptr),t}static normalize(t,r){return wasm.vector4_normalize(t.ptr,r.ptr),t}static dot(t,r){return wasm.vector4_dot(t.ptr,r.ptr)}static cross(t,r,a,e){return wasm.vector4_cross(t.ptr,r.ptr,a.ptr,e.ptr),t}static lerp(t,r,a,e){return wasm.vector4_lerp(t.ptr,r.ptr,a.ptr,e),t}static random(t,r){return wasm.vector4_random(t.ptr,!isLikeNone(r),isLikeNone(r)?0:r),t}static transformMat4(t,r,a){return wasm.vector4_transformMat4(t.ptr,r.ptr,a.ptr),t}static transformQuat(t,r,a){return wasm.vector4_transformQuat(t.ptr,r.ptr,a.ptr),t}static zero(t){return wasm.vector4_zero(t.ptr),t}static exactEquals(t,r){return 0!==wasm.vector4_exactEquals(t.ptr,r.ptr)}static equals(t,r){return 0!==wasm.vector4_equals(t.ptr,r.ptr)}static sub(t,r,a){return wasm.vector4_sub(t.ptr,r.ptr,a.ptr),t}static mul(t,r,a){return wasm.vector4_mul(t.ptr,r.ptr,a.ptr),t}static div(t,r,a){return wasm.vector4_div(t.ptr,r.ptr,a.ptr),t}static dist(t,r){return wasm.vector4_dist(t.ptr,r.ptr)}static sqrDist(t,r){return wasm.vector4_sqrDist(t.ptr,r.ptr)}static sqrLen(t){return wasm.vector4_sqrLen(t.ptr)}}function initModule(t){let r;const a={"./gl_matrix_wasm":__exports};if(t instanceof URL||"string"==typeof t||t instanceof Request){const e=fetch(t);r="function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(e,a).catch(t=>(console.warn("`WebAssembly.instantiateStreaming` failed. Assuming this is because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t),e.then(t=>t.arrayBuffer()).then(t=>WebAssembly.instantiate(t,a)))):e.then(t=>t.arrayBuffer()).then(t=>WebAssembly.instantiate(t,a))}else r=WebAssembly.instantiate(t,a).then(r=>r instanceof WebAssembly.Instance?{instance:r,module:t}:r);return r.then(({instance:t,module:r})=>(wasm=t.exports,init.__wbindgen_wasm_module=r,wasm))}